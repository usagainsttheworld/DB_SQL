<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/ling/Desktop/DB_SQL/rating.db"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="808"/><expanded_item id="0" parent="-1"/><expanded_item id="1" parent="-1"/><expanded_item id="2" parent="-1"/><expanded_item id="3" parent="-1"/></tab_structure><tab_browse><current_table name="Rating"/><column_widths data="AAAAAQAAAAoATQBvAHYAaQBlAAAAAQAAAAAAAAAA"/><sort column="2" order="1"/></tab_browse><tab_sql><sql name="SQL 1">/*There are 3 tables. Here's the schema: 

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. */
/***************************************************/

/*Q1  Find the titles of all movies directed by Steven Spielberg. */
select title
from Movie
where director = &quot;Steven Spielberg&quot;;

/*Q2 Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order. */
select distinct year
from Movie,Rating
where Movie.mID=Rating.mID and stars &gt;=4
order by year;

/*Q3 Find the titles of all movies that have no ratings */
select title
from Movie
where mID in (select mID from Movie) and mID not in (select mID from Rating);

/*Q4 Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. */
select name
from reviewer 
where rID in (select rID from Rating where ratingDate is NULL);

/*Q5 Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. */
select name, title, stars, ratingDate
from Reviewer, Movie, Rating
where Reviewer.rID=Rating.rID and movie.mID=rating.mID
order by name, title, stars;

/*Q6 For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. */
select name, title
from Reviewer, Movie, Rating R1, Rating R2
where movie.mID=R1.mID and R1.rID=reviewer.rID
	and movie.mID=R2.mID and R2.rID= reviewer.rID
	and R1.ratingDate &lt; R2.ratingDate and R1.stars &lt; R2.stars;

/*Q7 For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 
select title, max(stars)
from Movie, Rating
where movie.mID=rating.mID
group by rating.mID 
order by title;

/*Q8 For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 
select title, (Max(stars)-Min(stars)) as ratingspread
from Movie, Rating
where movie.mID=rating.mID
group by rating.mID
order by ratingspread desc, title;

/*Q9 Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) */
/*****the average rating for each movie before 1980*/
select avg(stars) as avg4movie_bf1980
from Movie, Rating
where movie.mID=rating.mID and year &lt; 1980
group by rating.mID
/*****the average rating for each movie after 1980*/
select avg(stars) as avg4movie_af1980
from Movie, Rating
where movie.mID=rating.mID and year &gt; 1980
group by rating.mID
/*****the average of those averages for movies before 1980*/
select avg(avg4movie_bf1980) bf1980
from (select avg(stars) as avg4movie_bf1980
	from Movie, Rating
	where movie.mID=rating.mID and year &lt; 1980
	group by rating.mID)
*****the average of those averages for movies after 1980*/
select avg(avg4movie_af1980) af1980
from (select title, avg(stars) as avg4movie_af1980
	from Movie, Rating
	where movie.mID=rating.mID and year &gt; 1980
	group by rating.mID)
/*****Difference between the average rating of movies released before and after 1980*/
select bf.bf1980-af.af1980
from (select avg(avg4movie_bf1980) bf1980
	from (select avg(stars) as avg4movie_bf1980
		from Movie, Rating
		where movie.mID=rating.mID and year &lt; 1980
		group by rating.mID)) as bf,
	(select avg(avg4movie_af1980) af1980
		from (select title, avg(stars) as avg4movie_af1980
			from Movie, Rating
			where movie.mID=rating.mID and year &gt; 1980
			group by rating.mID))as af;

/*Q10 Find the names of all reviewers who rated Gone with the Wind. */
select distinct name
from Reviewer, Rating, Movie
where reviewer.rID=rating.rID and rating.mID=movie.mID
	and title= 'Gone with the Wind'; 

/*Q11 For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. */
select name, title, stars
from Reviewer, Rating, Movie
where reviewer.rID=rating.rID and rating.mID=movie.mID
	and name=director

/*Q12 Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing &quot;The&quot;.) */
select name
from Reviewer
union
select title
from Movie
order by name, title;

/* Q13 Find the titles of all movies not reviewed by Chris Jackson. */
select title from Movie
except
select title 
	from Rating, Reviewer, Movie
	where reviewer.rID=rating.rID and rating.mID=movie.mID
		and name = 'Chris Jackson';

/* Q14 For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. */

select name1, name2 from
	(select distinct Rv1.name as name1, Rv2.name as name2
	from Reviewer Rv1, Reviewer Rv2,
		(select distinct Ra1.rID as id1, Ra2.rID as id2
		from  Rating Ra1, Rating Ra2
		where Ra1.rID &lt;&gt; Ra2.rID and Ra1.mID=Ra2.mID) 
		as pairID
	where Rv1.rID=pairID.id1 and Rv2.rID=pairID.id2) I
	as pairName
where name1 &lt; name2

/* Q15 For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. 
select name, title, stars
from Reviewer, Rating, Movie
where reviewer.rID=rating.rID and rating.mID=movie.mID
	and stars = (select MIN (stars) as lowest
		from Rating)

/* Q16 List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 
select title, avgRating
from Movie, 
	(select mID, avg(stars) as avgRating
	from Rating
	group by mID) 
	as avgmid
where movie.mID=avgmid.mID
order by avgRating DESC, title

/* Q17 Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 
select name
from Reviewer, Rating
where reviewer.rID=rating.rID
group by Rating.rID
having count(stars) &gt;=3 

/* Q18  Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 
select title, director
from Movie
where director in (select director 
		from Movie 
		group by director
		having count(title)&gt;1)
order by 2,1

/* Q19 Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 
select title, maxRating
from Movie, (select mID, max(avgRating)as maxRating
		from (select mID, avg(stars) as avgRating
			from Rating
			group by mID) as avgMovie)
		as maxMovie
where Movie.mID = maxMovie.mID

/* Q20 Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 


select title, avgRating
from	Movie, 
	(select mID, avg(stars) as avgRating
		from Rating
		group by mID) 
	as avgtable	
where movie.mID = avgtable.mID
	and avgRating =(select MIN(avgRating) as minRating
			from (select mID, avg(stars) as avgRating
				from Rating
				group by mID) 
				as avgtable)

/* Q21 For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

select	director, title, MAX(stars)as HighestRating
from	Movie, Rating
where	movie.mID=rating.mID
	and director is not NULL
group by	director</sql><current_tab id="0"/></tab_sql></sqlb_project>
