<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/ling/Desktop/DB_SQL/Social_network.db"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="808"/><expanded_item id="0" parent="-1"/><expanded_item id="1" parent="-1"/><expanded_item id="2" parent="-1"/><expanded_item id="3" parent="-1"/></tab_structure><tab_browse><current_table name="Friend"/><column_widths data="AAAAAQAAAAwARgByAGkAZQBuAGQAAAABAAAAAAAAAAA="/><sort column="0" order="0"/></tab_browse><tab_sql><sql name="SQL 1">/* Delete the tables if they already exist */
drop table if exists Highschooler;
drop table if exists Friend;
drop table if exists Likes;

/* Create the schema for our tables */
create table Highschooler(ID int, name text, grade int);
create table Friend(ID1 int, ID2 int);
create table Likes(ID1 int, ID2 int);

/* Populate the tables with our data */
insert into Highschooler values (1510, 'Jordan', 9);
insert into Highschooler values (1689, 'Gabriel', 9);
insert into Highschooler values (1381, 'Tiffany', 9);
insert into Highschooler values (1709, 'Cassandra', 9);
insert into Highschooler values (1101, 'Haley', 10);
insert into Highschooler values (1782, 'Andrew', 10);
insert into Highschooler values (1468, 'Kris', 10);
insert into Highschooler values (1641, 'Brittany', 10);
insert into Highschooler values (1247, 'Alexis', 11);
insert into Highschooler values (1316, 'Austin', 11);
insert into Highschooler values (1911, 'Gabriel', 11);
insert into Highschooler values (1501, 'Jessica', 11);
insert into Highschooler values (1304, 'Jordan', 12);
insert into Highschooler values (1025, 'John', 12);
insert into Highschooler values (1934, 'Kyle', 12);
insert into Highschooler values (1661, 'Logan', 12);

insert into Friend values (1510, 1381);
insert into Friend values (1510, 1689);
insert into Friend values (1689, 1709);
insert into Friend values (1381, 1247);
insert into Friend values (1709, 1247);
insert into Friend values (1689, 1782);
insert into Friend values (1782, 1468);
insert into Friend values (1782, 1316);
insert into Friend values (1782, 1304);
insert into Friend values (1468, 1101);
insert into Friend values (1468, 1641);
insert into Friend values (1101, 1641);
insert into Friend values (1247, 1911);
insert into Friend values (1247, 1501);
insert into Friend values (1911, 1501);
insert into Friend values (1501, 1934);
insert into Friend values (1316, 1934);
insert into Friend values (1934, 1304);
insert into Friend values (1304, 1661);
insert into Friend values (1661, 1025);
insert into Friend select ID2, ID1 from Friend;

insert into Likes values(1689, 1709);
insert into Likes values(1709, 1689);
insert into Likes values(1782, 1709);
insert into Likes values(1911, 1247);
insert into Likes values(1247, 1468);
insert into Likes values(1641, 1468);
insert into Likes values(1316, 1304);
insert into Likes values(1501, 1934);
insert into Likes values(1934, 1501);
insert into Likes values(1025, 1101);

/****************************************************************/
/* Q1 Find the names of all students who are friends with someone named Gabriel.*/
select name 
from Highschooler
where ID in 	(select	ID2
						from		Highschooler, Friend
						where	highschooler.ID=Friend.ID1
										and name='Gabriel'
						)

/* Q2 For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. */
select		h1.name, h1.grade, h2.name, h2.grade
from		Highschooler h1, Highschooler h2, Likes
where 	h1.ID=Likes.ID1 and h2.ID=Likes.ID2 
				and h1.grade - h2.grade &gt;= 2

/* Q3 For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. */
select		h1.name, h1.grade, h2.name, h2.grade
from		Likes L1, Likes L2, Highschooler h1, Highschooler h2
where	h1.ID=L1.ID1  and h2.ID = L1.ID2 
				and L1.ID1 = L2.ID2 
				and L1.ID2 = L2.ID1
				and h1.name &lt; h2.name

/* Q4 Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. */
select		name, grade
from		Highschooler
where	ID not in (select ID1 from Likes) and ID not in (select ID2 from Likes)
order by	grade, name

/*Q5 For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.*/
select		h1.name, h1.grade, h2. name, h2.grade
from 		Highschooler h1, Highschooler h2, Likes
where	h1.ID=Likes.ID1 and h2.ID=Likes.ID2 and h2.ID not in (select ID1 from Likes)

/* Q6 Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. */
select		name, grade
from		Highschooler
where	ID not in 	(select	h1.ID
									from		Highschooler h1, HIghschooler h2, Friend
									where	h1.ID=Friend.ID1 
													and h2.ID=Friend.ID2
													and h1.grade&lt;&gt;h2.grade
									)
order by	grade, name

/* Q7 For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. */
select		distinct h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
from		Highschooler h1, Highschooler h2, Highschooler h3, Likes, Friend f1, Friend f2
where	h1.ID=Likes.ID1 and h2.ID=Likes.ID2
				and h2.ID not in (select Friend.ID2 from friend where ID1 = h1.ID)
				and h1.ID =f1.ID1 and h3.ID =f1.ID2
				and h2.ID=f2.ID1 and h3.ID=f2.ID2
				


</sql><current_tab id="0"/></tab_sql></sqlb_project>
